const app = require("./app.js");
const request = require("supertest");
const helperFunctions = require("./helperFunctions.js")

const mockData = {"2019-04-30": {"2019-04-30T16:30:00-04:00": 419054, "2019-04-30T16:15:00-04:00": 397688, "2019-04-30T18:15:00-04:00": 417239, "2019-04-30T20:00:00-04:00": 424185, "2019-04-30T23:00:00-04:00": 424185, "2019-04-30T17:30:00-04:00": 372955, "2019-04-30T15:30:00-04:00": 424108, "2019-04-30T17:15:00-04:00": 424185, "2019-04-30T19:15:00-04:00": 399958, "2019-04-30T15:45:00-04:00": 397688, "2019-04-30T18:00:00-04:00": 319369, "2019-04-30T16:45:00-04:00": 424185, "2019-04-30T17:00:00-04:00": 319369, "2019-04-30T22:00:00-04:00": 424185, "2019-04-30T17:45:00-04:00": 397688, "2019-04-30T19:00:00-04:00": 319369, "2019-04-30T21:00:00-04:00": 424185}, "2019-05-02": {"2019-05-02T16:00:00-04:00": 372955, "2019-05-02T05:00:00-04:00": 424185, "2019-05-02T16:45:00-04:00": 424185, "2019-05-02T21:00:00-04:00": 424185, "2019-05-02T17:30:00-04:00": 397688, "2019-05-02T15:15:00-04:00": 397688, "2019-05-02T12:15:00-04:00": 397688, "2019-05-02T17:15:00-04:00": 417239, "2019-05-02T02:00:00-04:00": 424185, "2019-05-02T03:00:00-04:00": 424185, "2019-05-02T06:00:00-04:00": 424185, "2019-05-02T09:00:00-04:00": 399959, "2019-05-02T08:00:00-04:00": 399956, "2019-05-02T14:15:00-04:00": 424185, "2019-05-02T10:45:00-04:00": 399956, "2019-05-02T18:15:00-04:00": 419054, "2019-05-02T22:00:00-04:00": 424185, "2019-05-02T00:00:00-04:00": 424185, "2019-05-02T18:00:00-04:00": 319369, "2019-05-02T13:00:00-04:00": 319369, "2019-05-02T16:30:00-04:00": 419054, "2019-05-02T10:00:00-04:00": 424185, "2019-05-02T01:00:00-04:00": 399956, "2019-05-02T14:30:00-04:00": 335698, "2019-05-02T12:00:00-04:00": 319369, "2019-05-02T09:45:00-04:00": 424185, "2019-05-02T13:30:00-04:00": 397688, "2019-05-02T10:15:00-04:00": 397688, "2019-05-02T14:00:00-04:00": 319369, "2019-05-02T23:00:00-04:00": 424185, "2019-05-02T15:00:00-04:00": 319369, "2019-05-02T11:15:00-04:00": 397688, "2019-05-02T11:00:00-04:00": 424108, "2019-05-02T16:15:00-04:00": 397688, "2019-05-02T17:00:00-04:00": 319369, "2019-05-02T13:15:00-04:00": 424185, "2019-05-02T04:00:00-04:00": 424185, "2019-05-02T20:00:00-04:00": 424185, "2019-05-02T19:00:00-04:00": 319369, "2019-05-02T07:00:00-04:00": 424185}, "2019-05-03": {"2019-05-03T00:00:00-04:00": 424185}, "2019-05-01": {"2019-05-01T18:15:00-04:00": 424108, "2019-05-01T19:00:00-04:00": 399958, "2019-05-01T12:45:00-04:00": 417239, "2019-05-01T15:15:00-04:00": 397688, "2019-05-01T16:45:00-04:00": 424185, "2019-05-01T08:00:00-04:00": 399956, "2019-05-01T03:00:00-04:00": 424185, "2019-05-01T14:00:00-04:00": 319369, "2019-05-01T11:15:00-04:00": 397688, "2019-05-01T12:00:00-04:00": 424108, "2019-05-01T05:00:00-04:00": 424185, "2019-05-01T12:15:00-04:00": 319369, "2019-05-01T06:00:00-04:00": 424185, "2019-05-01T23:00:00-04:00": 424185, "2019-05-01T17:30:00-04:00": 397688, "2019-05-01T13:00:00-04:00": 319369, "2019-05-01T20:00:00-04:00": 424185, "2019-05-01T11:30:00-04:00": 335698, "2019-05-01T17:00:00-04:00": 424108, "2019-05-01T13:15:00-04:00": 397688, "2019-05-01T22:00:00-04:00": 424185, "2019-05-01T02:00:00-04:00": 424185, "2019-05-01T10:15:00-04:00": 397688, "2019-05-01T17:15:00-04:00": 424185, "2019-05-01T11:00:00-04:00": 424108, "2019-05-01T10:00:00-04:00": 424108, "2019-05-01T14:15:00-04:00": 424185, "2019-05-01T07:00:00-04:00": 424185, "2019-05-01T10:30:00-04:00": 399956, "2019-05-01T09:00:00-04:00": 399959, "2019-05-01T09:45:00-04:00": 424185, "2019-05-01T01:00:00-04:00": 399956, "2019-05-01T16:15:00-04:00": 397688, "2019-05-01T16:00:00-04:00": 424108, "2019-05-01T18:00:00-04:00": 419054, "2019-05-01T15:00:00-04:00": 319369, "2019-05-01T00:00:00-04:00": 424185, "2019-05-01T11:45:00-04:00": 399958, "2019-05-01T04:00:00-04:00": 424185, "2019-05-01T21:00:00-04:00": 424185}};
const reformattedData = { availabilityIds:
    [ '319369',
      '335698',
      '372955',
      '397688',
      '399956',
      '399958',
      '399959',
      '417239',
      '419054',
      '424108',
      '424185' ],
      availabilityTimes:
    [ [ '2019-04-30T17:00:00-04:00',
        '2019-04-30T18:00:00-04:00',
        '2019-04-30T19:00:00-04:00',
        '2019-05-01T12:15:00-04:00',
        '2019-05-01T13:00:00-04:00',
        '2019-05-01T14:00:00-04:00',
        '2019-05-01T15:00:00-04:00',
        '2019-05-02T12:00:00-04:00',
        '2019-05-02T13:00:00-04:00',
        '2019-05-02T14:00:00-04:00',
        '2019-05-02T15:00:00-04:00',
        '2019-05-02T17:00:00-04:00',
        '2019-05-02T18:00:00-04:00',
        '2019-05-02T19:00:00-04:00' ],
      [ '2019-05-01T11:30:00-04:00', '2019-05-02T14:30:00-04:00' ],
      [ '2019-04-30T17:30:00-04:00', '2019-05-02T16:00:00-04:00' ],
      [ '2019-04-30T15:45:00-04:00',
        '2019-04-30T16:15:00-04:00',
        '2019-04-30T17:45:00-04:00',
        '2019-05-01T10:15:00-04:00',
        '2019-05-01T11:15:00-04:00',
        '2019-05-01T13:15:00-04:00',
        '2019-05-01T15:15:00-04:00',
        '2019-05-01T16:15:00-04:00',
        '2019-05-01T17:30:00-04:00',
        '2019-05-02T10:15:00-04:00',
        '2019-05-02T11:15:00-04:00',
        '2019-05-02T12:15:00-04:00',
        '2019-05-02T13:30:00-04:00',
        '2019-05-02T15:15:00-04:00',
        '2019-05-02T16:15:00-04:00',
        '2019-05-02T17:30:00-04:00' ],
      [ '2019-05-01T01:00:00-04:00',
        '2019-05-01T08:00:00-04:00',
        '2019-05-01T10:30:00-04:00',
        '2019-05-02T01:00:00-04:00',
        '2019-05-02T08:00:00-04:00',
        '2019-05-02T10:45:00-04:00' ],
      [ '2019-04-30T19:15:00-04:00',
        '2019-05-01T11:45:00-04:00',
        '2019-05-01T19:00:00-04:00' ],
      [ '2019-05-01T09:00:00-04:00', '2019-05-02T09:00:00-04:00' ],
      [ '2019-04-30T18:15:00-04:00',
        '2019-05-01T12:45:00-04:00',
        '2019-05-02T17:15:00-04:00' ],
      [ '2019-04-30T16:30:00-04:00',
        '2019-05-01T18:00:00-04:00',
        '2019-05-02T16:30:00-04:00',
        '2019-05-02T18:15:00-04:00' ],
      [ '2019-04-30T15:30:00-04:00',
        '2019-05-01T10:00:00-04:00',
        '2019-05-01T11:00:00-04:00',
        '2019-05-01T12:00:00-04:00',
        '2019-05-01T16:00:00-04:00',
        '2019-05-01T17:00:00-04:00',
        '2019-05-01T18:15:00-04:00',
        '2019-05-02T11:00:00-04:00' ],
      [ '2019-04-30T16:45:00-04:00',
        '2019-04-30T17:15:00-04:00',
        '2019-04-30T20:00:00-04:00',
        '2019-04-30T21:00:00-04:00',
        '2019-04-30T22:00:00-04:00',
        '2019-04-30T23:00:00-04:00',
        '2019-05-01T00:00:00-04:00',
        '2019-05-01T02:00:00-04:00',
        '2019-05-01T03:00:00-04:00',
        '2019-05-01T04:00:00-04:00',
        '2019-05-01T05:00:00-04:00',
        '2019-05-01T06:00:00-04:00',
        '2019-05-01T07:00:00-04:00',
        '2019-05-01T09:45:00-04:00',
        '2019-05-01T14:15:00-04:00',
        '2019-05-01T16:45:00-04:00',
        '2019-05-01T17:15:00-04:00',
        '2019-05-01T20:00:00-04:00',
        '2019-05-01T21:00:00-04:00',
        '2019-05-01T22:00:00-04:00',
        '2019-05-01T23:00:00-04:00',
        '2019-05-02T00:00:00-04:00',
        '2019-05-02T02:00:00-04:00',
        '2019-05-02T03:00:00-04:00',
        '2019-05-02T04:00:00-04:00',
        '2019-05-02T05:00:00-04:00',
        '2019-05-02T06:00:00-04:00',
        '2019-05-02T07:00:00-04:00',
        '2019-05-02T09:45:00-04:00',
        '2019-05-02T10:00:00-04:00',
        '2019-05-02T13:15:00-04:00',
        '2019-05-02T14:15:00-04:00',
        '2019-05-02T16:45:00-04:00',
        '2019-05-02T20:00:00-04:00',
        '2019-05-02T21:00:00-04:00',
        '2019-05-02T22:00:00-04:00',
        '2019-05-02T23:00:00-04:00',
        '2019-05-03T00:00:00-04:00' ] ] };

describe("today", () => {
    it("returns today's formatted date", () => {
        expect(helperFunctions.today()).toBe(new Date().toLocaleDateString());
    });
});

describe("reformat", () => {
    it("returns reformatted availabilities", () => {
        expect(helperFunctions.reformatAvailabilities(mockData)).toEqual(reformattedData);
    });
});

describe("closest availability", () => {
  it("returns the closest availability for a given timeStamp", () => {
      expect(helperFunctions.closestAvailability(mockData, '2019-04-30T17:00:00-04:00')).toEqual({availabilityId: 319369, availabilityTime: '2019-04-30T17:00:00-04:00'});
  });
});

describe("test /today", () => {
    it("returns the correct object for /GET/today", (done) => {
        request(app)
            .get('/today')
            .expect(200)
            .end(function(err, res) {
                expect(res.body).toHaveProperty('today');
                done();
            });
    });
});

describe("test /bookings", () => {
    const server = request(app);
    const mockBooking = ['testID', 'testName', 'testTime'];
    it("returns empty array for /GET/bookings", (done) => {
        server
            .get('/bookings')
            .expect(200)
            .end(function(err, res) {
                expect(res.body.length).toBe(0);
                done();
            });
    });

    it("adds booking to array for /POST/bookings", (done) => {
        server
            .post('/bookings')
            .send({booking: mockBooking})
            .expect(200)
            .end(function(err, res) {
                server
                    .get('/bookings')
                    .expect(200)
                    .end(function(err, res) {
                        expect(res.body.length).toBe(1);
                        expect(res.body[0]).toEqual(mockBooking);
                        done();
                    });
            });
    });
});
